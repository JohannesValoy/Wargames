<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>no.ntnu.idatx2001</groupId>
    <artifactId>JavaFX-19-TableView-Installer-FXML</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>17.0.2</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>17.0.2</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
            </plugin>
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.8</version>
                <configuration>
                    <mainClass>no.ntnu.idata2001/no.ntnu.idatx2001.newsstand.Main</mainClass>
                    <!--
                    Tillegg for JLink
                    -->
                    <jlinkImageName>LiteratureApp</jlinkImageName>
                    <launcher>TableViewDemo</launcher>
                </configuration>
            </plugin>
            <!--
            This plugin creates what is called an "Uber-jar", which is a single JAR-file that incorporates
            all the JAR-files that this project depends on. Thsi way, you can distribute this single
            JAR-file to the "customer", and it should be possible for the customer to just double-click the
            JAR-file to run the application-
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.4</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            <transformers>
                                <transformer implementation=
                                                     "org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <!-- TODO: Add your main-class here, with full package prefix. From the example above: the MyJavaFXApplicationMain-class -->
                                    <mainClass>no.ntnu.idatx2001.newsstand.Main</mainClass>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!--
                The jpackage plugin creates an installer (.dmg on mac, .exe on windows).
                NB! Remember to run the javafx:jlink plugin prior to running this plugin.
                I have not tested this fully, so it might not work....
                -->
                <groupId>org.panteleyev</groupId>
                <artifactId>jpackage-maven-plugin</artifactId>
                <version>1.4.0</version>
                <configuration>
                    <name>LiteratureApp</name>
                    <appVersion>1.0.0</appVersion>
                    <vendor>edu.ntnu</vendor>
                    <destination>target/dist</destination>
                    <module>no.ntnu.idata2001/no.ntnu.idata2001.newsstand.Main</module>
                    <runtimeImage>target/LiteratureApp</runtimeImage>
                    <linuxShortcut>true</linuxShortcut>
                    <linuxPackageName>treefx</linuxPackageName>
                    <linuxAppCategory>Utilities</linuxAppCategory>
                    <linuxMenuGroup>Utilities</linuxMenuGroup>
                    <icon>icon_512x512.png</icon>
                    <javaOptions>
                        <option>-Dfile.encoding=UTF-8</option>
                    </javaOptions>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project><!--
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.johakv.stud.ntnu.no</groupId>
    <artifactId>WarGames</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <jupiter.version>5.8.2</jupiter.version>
    </properties>




    &lt;!&ndash;
        Det finnes en rekke instillinger som kan gjøres via "properties" (variabler/egenskaper).
        Disse "variablene" kan du så referere til lenger ned i Pom-fila ved å skrive

                 ${maven.compiler.source}

        En av disse variablene definerer hvilken versjon av JDK prosjektet ditt skal bygges for.
        Velg en av versjonene som er såkalt "Long Time Support" (LTS), som for tiden er JDK 8 og 11.

        For å sikre kompatibilitet av teksten i kildekode-filene dine på tvers av platformer
        (Windows, MacOS, Linux osv), bør du sette at tekst skal formateres i henhold til UTF-8
        (som er project.build.sourceEncoding-propertien)
        &ndash;&gt;
    <build>
        <plugins>
            &lt;!&ndash;
                Et Maven prosjekt baserer seg på en rekke plugins. Disse har en default
                versjon som benyttes dersom ikke annet er spesifisert. For å kunne kjøre JUnit-tester
                i porsjektet ditt, benyttes en plugin som kalles "Surefire". Default versjonen som kommer
                med Maven er for gammel til å støtte JUnit5.
                Du må derfor overstyre denne default versjonen, og fortelle Maven at du ønsker å bruke
                en nyere versjon av denne pluginen. Det har vært mye ustabilitet med versjonene
                2.20 til og 2.22, så vi ANBEFALER at du bruker versjon 3.0.0-M5 og senere, selv om dette
                streng tatt ikke er fullverdig release ennå.
                En plugin håndteres på samme måte som et bibliotek i dependency-seksjonen: den blir
                automatisk lastet til din datamaskin under bygging, så du trenger ikke laste ned noe selv.
            &ndash;&gt;
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>14</source>
                    <target>14</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M5</version>
            </plugin>
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.8</version>
                <configuration>
                    <mainClass>Old.WargamesApp</mainClass>
                </configuration>
            </plugin>
        </plugins>
    </build>

    &lt;!&ndash;
        Og her kommer da alle eksterne biblioteker som prosjektet ditt benytter. Det er tilstrekkelig
        å legge inn groupID og ArtifactID og versjon i seksjonen under, så vil riktig biblioteks fil
        bli lastet ned autmatisk til din datamaskin. Dersom biblioteket du har lagt inn på sin side
        er avhengig av andre biblioteker, vil også disse bli automatisk lastet ned ;-)

        Dersom biblioteket kun er aktuelt f.eks. kun i forbindelse med testing, bør du også legge
        til "scope", som vist for Jupiter-biblioteket under for JUnit-testing.
    &ndash;&gt;
    <dependencies>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>17.0.2</version>
        </dependency>
        <dependency>
&lt;!&ndash;            TODO check version!!!&ndash;&gt;
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>17.0.2</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

</project>-->
